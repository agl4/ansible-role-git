---
name: Molecule testing
on:
  push: {}
  pull_request: {}
  schedule:
    - cron: "12 6 * * *"
jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Install Prettier.js
        run: npm install --global prettier

      - name: yamllint
        run: pipenv run yamllint .

      - name: prettier
        run: pipenv run prettier --check .

      - name: ansible-lint
        run: pipenv run ansible-lint .

  molecule:
    needs: linting
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.8"]
        experimental: [false]
        molecule_image:
          - agoloncser/docker-ansible-fedora32
          - agoloncser/docker-ansible-fedora33
          - agoloncser/docker-ansible-ubuntu2004
          - agoloncser/docker-ansible-ubuntu2010
        include:
          - molecule_image: agoloncser/docker-ansible-fedora34
            python_version: "3.8"
            experimental: true

    steps:
      - name: Use Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev
      - name: Molecule test
        run: pipenv run molecule test
        env:
          MOLECULE_IMAGE: ${{ matrix.molecule_image }}

  galaxy_upload:
    runs-on: ubuntu-latest
    needs: molecule
    steps:
      - name: Import to Galaxy
        uses: robertdebock/galaxy-action@1.0.3
        with:
          galaxy_api_key: ${{ secrets.galaxy_api_key }}
